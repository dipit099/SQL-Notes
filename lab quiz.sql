---------1
CREATE TABLE JOB_RANK (
JOB_ID VARCHAR2(10),
RANK_ NUMBER
);
SELECT * FROM JOB_RANK;
DROP TABLE JOB_RANK ;
CREATE OR REPLACE PROCEDURE RANK_JOBS(MIN_HIRED_COUNT IN NUMBER) IS 
JT VARCHAR2(255);
TEMP VARCHAR2(255);
IDX NUMBER;
EMP NUMBER;
RANK_ NUMBER;
BEGIN 
	RANK_ := 1;
	FOR R IN (
		SELECT AVG(SALARY) AS AV, JOB_ID
		FROM EMPLOYEES
		WHERE JOB_ID IS NOT NULL
		GROUP BY JOB_ID
		ORDER BY AVG(SALARY) DESC
	)
	LOOP 
		SELECT JOB_TITLE INTO JT
		FROM JOBS WHERE JOB_ID = R.JOB_ID;
--		DBMS_OUTPUT.PUT_LINE('H');
--	
		IDX := INSTR(JT, ' ') + 1;
		TEMP := SUBSTR(JT, 1, 2) || '_' || SUBSTR(JT, IDX, 3);
		TEMP := UPPER(TEMP);
--		DBMS_OUTPUT.PUT_LINE(TEMP);
		SELECT COUNT(*) INTO EMP
		FROM EMPLOYEES WHERE JOB_ID = R.JOB_ID;
--		DBMS_OUTPUT.PUT_LINE(TEMP || ' ' || R.JOB_ID);
		IF R.JOB_ID = TEMP AND EMP >= MIN_HIRED_COUNT THEN
			DBMS_OUTPUT.PUT_LINE('RANK-' ||TO_CHAR(RANK_));
			DBMS_OUTPUT.PUT_LINE(JT || '(' || R.JOB_ID || ')');
			DBMS_OUTPUT.PUT_LINE('EMPLYOEES HIRED: ' || TO_CHAR(EMP));
			DBMS_OUTPUT.PUT_LINE('AVERAGE SALARY: ' || TO_CHAR(R.AV));
			INSERT INTO JOB_RANK VALUES(R.JOB_ID, RANK_);
			RANK_ := RANK_ + 1;
		END IF;		
	END LOOP;	
END;

DECLARE
BEGIN
--	A;
	RANK_JOBS(5);
END;


CREATE OR REPLACE PROCEDURE  A IS 
BEGIN 
	DBMS_OUTPUT.PUT_LINE('AS');
END;



--2
DROP TABLE TEMP_EMPLOYEES;
CREATE TABLE TEMP_EMPLOYEES AS SELECT * FROM EMPLOYEES;
SELECT * FROM TEMP_EMPLOYEES;

CREATE OR REPLACE TRIGGER T 
BEFORE UPDATE 
OF SALARY
ON TEMP_EMPLOYEES
FOR EACH ROW
DECLARE
OS NUMBER;
NS NUMBER;
MN NUMBER;
MN_MAN NUMBER;
C NUMBER;
MAN_ID NUMBER;
MAN_SAL NUMBER;
D NUMBER;
EX EXCEPTION;
BEGIN 
	C := 0;
	MN_MAN := 0; 
	OS := :OLD.SALARY;
	NS := :NEW.SALARY;
	SELECT MIN(SALARY) INTO MN 
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID <> :OLD.EMPLOYEE_ID AND JOB_ID = :OLD.JOB_ID;
	SELECT MIN(SALARY) INTO MN_MAN 
	FROM EMPLOYEES E
	WHERE JOB_ID = :OLD.JOB_ID AND 
	EXISTS (
	SELECT *
	FROM EMPLOYEES
	WHERE E.EMPLOYEE_ID = MANAGER_ID
	);	
	SELECT COUNT(*) INTO C 
	FROM EMPLOYEES E
	WHERE E.EMPLOYEE_ID = :OLD.EMPLOYEE_ID AND 
	EXISTS (
	SELECT *
	FROM EMPLOYEES
	WHERE E.EMPLOYEE_ID = MANAGER_ID
	);--	
--	SELECT DISTINCT DEPARTMENT_ID INTO D
--	FROM EMPLOYEES E 
--	WHERE E.DEPARTMENT_ID = :OLD.DEPARTMENT_ID;
	SELECT  MANAGER_ID INTO MAN_ID
	FROM DEPARTMENTS
	WHERE DEPARTMENT_ID = :OLD.DEPARTMENT_ID;
	SELECT SALARY INTO MAN_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = MAN_ID;	
	IF NOT (NS >= MN OR
	 (C = 0 AND NS < MN_MAN)  OR
	 (NS < MAN_SAL)) THEN
	 DBMS_OUTPUT.PUT_LINE('ABV');
	 RAISE EX;
	END IF;
--EXCEPTION
--	WHEN EX THEN RAISE_APPLICATION_ERROR(-20001, 'UNSUCCESSFUL UPDATE');
END;


UPDATE TEMP_EMPLOYEES
SET SALARY = 100000
WHERE EMPLOYEE_ID = 198;











SELECT SALARY FROM EMPLOYEES e WHERE E.EMPLOYEE_ID = 198;

SELECT MIN(SALARY)
FROM EMPLOYEES E
WHERE JOB_ID = 'SA_MAN' AND 
EXISTS (
SELECT *
FROM EMPLOYEES 
WHERE E.EMPLOYEE_ID = MANAGER_ID
);



------------------------------
SELECT FIRST_NAME || ' '|| LAST_NAME ,SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE DEPARTMENT_ID!= 80 AND (SALARY>6000 OR COMMISSION_PCT IS NOT NULL)
ORDER BY  COMMISSION_PCT DESC , LAST_NAME ASC;



SELECT FIRST_NAME, LAST_NAME , EMAIL
FROM EMPLOYEES E1
WHERE UPPER(EMAIL) NOT LIKE '%' || UPPER( REPLACE(LAST_NAME, ' ', '') )



SELECT  SUM(8100-SALARY) AS N_S
FROM EMPLOYEES
WHERE SALARY < 8100 







SELECT JOB_ID, MAX(SALARY)-MIN(SALARY) AS SRANGE
FROM EMPLOYEES E1
GROUP BY JOB_ID
HAVING COUNT(*)>1
ORDER BY SRANGE DESC




---------------


SELECT FIRST_NAME,LAST_NAME,JOB_ID, LOWER( REPLACE(FIRST_NAME, ' ','') ||'.' ||  
REPLACE(LAST_NAME, ' ','') || '@' || REPLACE(JOB_ID, '_','') )
|| '.buet.ac.bd'  AS DEPT_MAIL
FROM EMPLOYEES



SELECT SUM((NVL(COMMISSION_PCT,0)+0.02 )*SALARY) AS TT
FROM EMPLOYEES
WHERE ROUND((TO_DATE(SYSDATE)- HIRE_DATE )/365 )> 15;

select sum(salary*(NVL(COMMISSION_PCT, 0)+0.02)) as TOTAL_COMMISSION_NOW
from hr.employees
where (sysdate-hire_date)/365 > 15;






SELECT DEPARTMENT_ID,
	(SELECT COUNT(*)
	FROM EMPLOYEES E2
	WHERE E2.DEPARTMENT_ID = E1.DEPARTMENT_ID
	AND E2.SALARY >6500) AS CC1,
		(SELECT COUNT(*)
	FROM EMPLOYEES E2
	WHERE E2.DEPARTMENT_ID = E1.DEPARTMENT_ID
	AND E2.SALARY <=6500) AS CC2
FROM EMPLOYEES E1
GROUP BY DEPARTMENT_ID
HAVING DEPARTMENT_ID IS NOT NULL


------------------


SELECT MANAGER_ID, COUNT(*), SUM(SALARY+ SALARY*COMMISSION_PCT)
FROM EMPLOYEES
GROUP BY MANAGER_ID
HAVING SUM(SALARY+ SALARY*COMMISSION_PCT)>0



---ADVANCED SQL


SELECT DISTINCT E1.*
FROM EMPLOYEES E1
WHERE E1.JOB_ID = ALL (
    SELECT E2.JOB_ID
    FROM EMPLOYEES E2
    WHERE E1.EMPLOYEE_ID = E2.MANAGER_ID   AND E2.JOB_ID IS NOT NULL 
    
);




SELECT *
FROM EMPLOYEES
WHERE MANAGER_ID=198


SELECT E1.*
FROM EMPLOYEES E1
WHERE 1 = ( 
		SELECT COUNT(*)
		FROM EMPLOYEES E2
		WHERE E1.JOB_ID = E2.JOB_ID 
	
)



SELECT DISTINCT DEPARTMENT_ID
FROM EMPLOYEES E1
WHERE HIRE_DATE < ANY(
		SELECT HIRE_DATE
		FROM EMPLOYEES E2
		WHERE E1.EMPLOYEE_ID = E2.MANAGER_ID) ;






SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME
FROM HR.DEPARTMENTS D JOIN HR.EMPLOYEES M ON D.MANAGER_ID = M.EMPLOYEE_ID
WHERE M.HIRE_DATE > ANY (
SELECT HIRE_DATE
FROM HR.EMPLOYEES
WHERE DEPARTMENT_ID = D.DEPARTMENT_ID AND EMPLOYEE_ID != M.EMPLOYEE_ID
)
ORDER BY D.DEPARTMENT_ID;


SELECT D.DEPARTMENT_ID,D.DEPARTMENT_NAME
FROM DEPARTMENTS D JOIN EMPLOYEES E1
ON D.MANAGER_ID = E1.EMPLOYEE_ID
WHERE  E1.HIRE_DATE > ANY(
		SELECT HIRE_DATE
		FROM EMPLOYEES E2
		WHERE E1.EMPLOYEE_ID = E2.MANAGER_ID
		AND E2.DEPARTMENT_ID = E1.DEPARTMENT_ID
		);




SELECT E1.FIRST_NAME,E1.LAST_NAME,(SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE E1.DEPARTMENT_ID = DEPARTMENT_ID) AS DEPARTMENT_NAME
FROM EMPLOYEES E1
WHERE 1 = ( 
    SELECT COUNT(*)
    FROM EMPLOYEES E2
    WHERE E1.DEPARTMENT_ID = E2.DEPARTMENT_ID AND E1.SALARY < E2.SALARY
);





SELECT EMPLOYEE_ID , COUNT(*)
FROM (
	SELECT EMPLOYEE_ID,JOB_ID
	FROM EMPLOYEES E2	
	UNION 	
	SELECT EMPLOYEE_ID,JOB_ID
	FROM JOB_HISTORY E3
	)
	
GROUP BY EMPLOYEE_ID
ORDER BY EMPLOYEE_ID;



SELECT EMPLOYEE_ID, COUNT(*) N_POSTS
FROM (
SELECT EMPLOYEE_ID, JOB_ID FROM hr.EMPLOYEES
UNION
SELECT EMPLOYEE_ID, JOB_ID FROM hr.JOB_HISTORY
)
GROUP BY EMPLOYEE_ID
ORDER BY EMPLOYEE_ID;


--B 


SELECT E.FIRST_NAME, E.LAST_NAME,E.SALARY, C.COUNTRY_NAME
FROM EMPLOYEES E 
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID =  D.DEPARTMENT_ID
JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID
JOIN COUNTRIES C ON L.COUNTRY_ID = C.COUNTRY_ID

WHERE E.SALARY =  (  
SELECT MAX(SALARY)
FROM EMPLOYEES E1 
JOIN DEPARTMENTS D1 ON E1.DEPARTMENT_ID =  D1.DEPARTMENT_ID
JOIN LOCATIONS L1 ON D1.LOCATION_ID = L1.LOCATION_ID
JOIN COUNTRIES C1 ON L1.COUNTRY_ID = C1.COUNTRY_ID
GROUP BY C1.COUNTRY_ID
HAVING C1.COUNTRY_ID = C.COUNTRY_ID
);





SELECT e.FIRST_NAME, e.LAST_NAME, e.SALARY,c.COUNTRY_NAME
FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
JOIN LOCATIONS l ON d.LOCATION_ID = l.LOCATION_ID
JOIN COUNTRIES c ON l.COUNTRY_ID = l.COUNTRY_ID

JOIN
(
SELECT c.COUNTRY_ID, MAX(e.SALARY) AS MAX_SALARY
FROM COUNTRIES c
JOIN LOCATIONS l ON l.COUNTRY_ID = c.COUNTRY_ID
JOIN DEPARTMENTS d ON d.LOCATION_ID = l.LOCATION_ID
JOIN EMPLOYEES e ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
GROUP BY c.COUNTRY_ID
) COUNTRY_MAX_SALARY
ON c.COUNTRY_ID = COUNTRY_MAX_SALARY.COUNTRY_ID
WHERE e.SALARY = COUNTRY_MAX_SALARY.MAX_SALARY;




















-------------------------




DECLARE 
	MSG VARCHAR2(100);
	PROCEDURE FIND_NAME(ID IN VARCHAR2) IS  
		BEGIN	
		
				SELECT FIRST_NAME INTO MSG
				FROM EMPLOYEES
				WHERE EMPLOYEE_ID = ID;
		END	;
		
BEGIN 
	FIND_NAME(100);
	DBMS_OUTPUT.PUT_LINE(MSG);
END;




CREATE OR REPLACE TRIGGER NULL_JOBID
BEFORE INSERT
ON TEMP_EMPLOYEES
FOR EACH ROW
DECLARE
BEGIN
    IF :NEW.JOB_ID IS NULL THEN
        :NEW.JOB_ID := 'MY JOB'; -- Use := for assignment instead of = 
    END IF;
END;


INSERT INTO TEMP_EMPLOYEES (EMPLOYEE_ID) VALUES (12);























