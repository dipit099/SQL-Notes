--3

DECLARE 
	MSG VARCHAR2(100);
	PROCEDURE FIND_NAME(ID IN VARCHAR2) IS  
		BEGIN	
		
				SELECT FIRST_NAME INTO MSG
				FROM EMPLOYEES
				WHERE EMPLOYEE_ID = ID;
		END	;
		
BEGIN 
	FIND_NAME(100);
	DBMS_OUTPUT.PUT_LINE(MSG);
END;




CREATE OR REPLACE TRIGGER NULL_JOBID
BEFORE INSERT
ON TEMP_EMPLOYEES
FOR EACH ROW
DECLARE
BEGIN
    IF :NEW.JOB_ID IS NULL THEN
        :NEW.JOB_ID := 'MY JOB'; -- Use := for assignment instead of = 
    END IF;
END;


INSERT INTO TEMP_EMPLOYEES (EMPLOYEE_ID) VALUES (12);


-------------
CREATE TABLE TEMP_EMPLOYEES
(
EMPLOYEE_ID NUMBER,
JOB_ID VARCHAR2(50),
SALARY NUMBER
);

INSERT INTO TEMP_EMPLOYEES VALUES (100, 'SA_REP', 10000); 
INSERT INTO TEMP_EMPLOYEES VALUES (10, 'SA_REP', 5000);




DECLARE
	MSG VARCHAR2(100);
  PROCEDURE TRANSFER(EID IN NUMBER, J_ID IN VARCHAR2) IS
  MIN_SALARY NUMBER;
	
	BEGIN
	DBMS_OUTPUT.PUT_LINE('RR');
  SELECT MIN(SALARY) INTO MIN_SALARY
  FROM TEMP_EMPLOYEES
  WHERE JOB_ID = J_ID;

  
  UPDATE TEMP_EMPLOYEES
  SET JOB_ID = J_ID,
      SALARY = 1000;
		--WHERE

	MSG:= MIN_SALARY;
	
	EXCEPTION
	WHEN OTHERS THEN
	DBMS_OUTPUT.PUT_LINE('EXCEPTION');
	END;
BEGIN  
	
  TRANSFER(100,'SA_REP');
	DBMS_OUTPUT.PUT_LINE(MSG);
END;





/
DECLARE
	MSG VARCHAR2(100);
BEGIN
	TRANSFER(100,'SA_REP',MSG);
	DBMS_OUTPUT.PUT_LINE(MSG);
	END;
/


SELECT JOB_ID FROM TEMP_EMPLOYEES WHERE EMPLOYEE_ID = 100;





--02

DECLARE

	JOBID VARCHAR2(100);
	DD NUMBER:=0;
	LASTNAME VARCHAR2(100);
	HIREDATE DATE;
	
	
	FUNCTION LONG_SERVE(JOBTITLE IN VARCHAR2)
	RETURN VARCHAR2 IS
	BEGIN
	
	SELECT JOB_ID INTO JOBID
	FROM JOBS
	WHERE JOB_TITLE=JOBTITLE;
	
	FOR R IN (SELECT *  
					FROM EMPLOYEES
					WHERE JOB_ID=JOBID)
	LOOP 	
	IF( TO_DATE(SYSDATE) - R.HIRE_DATE > DD) THEN
	LASTNAME:= R.LAST_NAME;
-- 	DBMS_OUTPUT.PUT_LINE('UPDATED');
	DD:= TO_DATE(SYSDATE) - R.HIRE_DATE;
	END IF;
	END LOOP;
	
	RETURN LASTNAME;
	
	END;

BEGIN
DBMS_OUTPUT.PUT_LINE(LONG_SERVE('Stock Clerk'));

END;










--02

DECLARE
	FUNCTION TOP_DAYS(JOBTITLE IN VARCHAR)
	RETURN VARCHAR2 IS	 
		LASTNAME VARCHAR2(255);
		MAXDAYS NUMBER:=0;
		JOBID VARCHAR2(255);
		DAYS NUMBER;

	BEGIN		
	SELECT JOB_ID INTO JOBID
	FROM JOBS
	WHERE JOB_TITLE= 'Stock Clerk';

			FOR R IN(
			SELECT *
			FROM EMPLOYEES
			WHERE JOB_ID = JOBID
		)
		LOOP 
		DAYS:= (SYSDATE-R.HIRE_DATE);
		IF(DAYS>MAXDAYS) THEN 
			MAXDAYS:= DAYS;
			LASTNAME := R.LAST_NAME;
	END IF;
	END LOOP;		
		RETURN LASTNAME;
	END;
BEGIN	
	DBMS_OUTPUT.PUT_LINE(TOP_DAYS('Stock Clerk'));
END ;
/









--01

DECLARE
	A NUMBER;
	TEMPSAL NUMBER;
		RET NUMBER;
		COMPARECOUNT NUMBER;
		D_ID NUMBER;
	FUNCTION TOP_PAID(EID IN VARCHAR2, N IN NUMBER)
	RETURN NUMBER IS	 
		
		
	BEGIN		
		SELECT SALARY INTO TEMPSAL
		FROM EMPLOYEES
		WHERE EMPLOYEE_ID= EID;

		SELECT DEPARTMENT_ID INTO D_ID
		FROM EMPLOYEES
	WHERE EMPLOYEE_ID = EID;

			SELECT COUNT(EMPLOYEE_ID) INTO COMPARECOUNT 
		FROM EMPLOYEES 
		WHERE SALARY >TEMPSAL AND DEPARTMENT_ID=D_ID;

		IF COMPARECOUNT >= N THEN RET:=0;
		ELSE RET:=1;
		END IF;
			
		RETURN RET;
		END;
BEGIN
		A:= TOP_PAID(151,13);
	DBMS_OUTPUT.PUT_LINE(A);
END ;









--12.6
--A

CREATE TABLE STUDENT(

STUDENT_NAME VARCHAR2(100),
CGPA NUMBER);




CREATE OR REPLACE TRIGGER MY_TRIGGER
AFTER INSERT
ON STUDENT

DECLARE
BEGIN
	DBMS_OUTPUT.PUT_LINE('INSERTED');

END;
/

INSERT INTO STUDENT(STUDENT_NAME,CGPA)
VALUES ('dIPIT',4);
INSERT INTO STUDENT(STUDENT_NAME,CGPA)
VALUES ('GHJG',4);
INSERT INTO STUDENT(STUDENT_NAME,CGPA)
VALUES ('FG',4);


DROP TRIGGER MY_TRIGGER;






































